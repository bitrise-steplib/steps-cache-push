format_version: 2
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  # define these in your .bitrise.secrets.yml
  - BITRISE_CACHE_API_URL: $BITRISE_CACHE_API_URL
  - BITRISE_CACHE_INFO_PATH: $BITRISE_CACHE_INFO_PATH
  - STEP_VERSION: "2.0.1"

workflows:
  test:
    before_run:
    - go-tests
    steps:
    - change-workdir:
        title: Switch working dir to test / _tmp dir
        description: |-
          To prevent step testing issues, like referencing relative
          files with just './some-file' in the step's code, which would
          work for testing the step from this directory directly
          but would break if the step is included in another `bitrise.yml`.
        run_if: true
        inputs:
        - path: ./_tmp
        - is_create_path: true
    - script:
        title: Download assets
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            rm -rf ./_sample_artifacts
            git clone https://github.com/bitrise-samples/sample-artifacts.git ./_sample_artifacts
    - change-workdir:
        title: Switch working dir to test / _tmp dir
        description: |-
          To prevent step testing issues, like referencing relative
          files with just './some-file' in the step's code, which would
          work for testing the step from this directory directly
          but would break if the step is included in another `bitrise.yml`.
        run_if: true
        inputs:
        - path: ./_workdir
        - is_create_path: true
    - path::./:
        title: Step Test
        run_if: true
        is_skippable: false
        inputs:
        - is_debug_mode: true
        - cache_paths: |
            $BITRISE_CACHE_DIR
            ../_sample_artifacts/filestructure -> ../_sample_artifacts/filestructure/build/findme.test
            ./DoesNotExist/
            ./DoesNotExist
            /Does/not/exists
            ../_sample_artifacts/ipas
            ../_sample_artifacts/ipas/
            ../_sample_artifacts/filestructure/build/test.bin
        - ignore_check_on_paths: |-
            ../_sample_artifacts/filestructure/sub-dir
            *.apk
    - script:
        title: Create another samples
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            rm -rf /tmp/cache-archive.tar
            rm -rf /tmp/cache-info.json
            rm -rf ./another_samples
            mkdir ./another_samples

            #should follow changes
            echo "content" > ./another_samples/test_file1.txt

            #should not exists
            echo "content" > ./another_samples/test_exclude_ext.mp3

            #should exists but ignore changes
            echo "content" > ./another_samples/test_ignorechanges.txt
    - path::./:
        title: Step Test
        is_always_run: true
        run_if: true
        is_skippable: false
        inputs:
        - compress_archive: true
        - is_debug_mode: true
        - cache_paths: |
            ./another_samples
        - ignore_check_on_paths: |-
            ./another_samples/test_ignorechanges.txt
            !*.mp3
    - script:
        title: Store MD5 hash and check if file doesn't exists
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            
            rm -rf ./another_samples
            tar -xPf /tmp/cache-archive.tar

            envman add --key MD5PREVIOUSLY --value $(md5 -q ./another_samples/test_ignorechanges.txt)
            echo "content" >> ./another_samples/test_ignorechanges.txt

            #should not exists
            if [ -f ./another_samples/test_exclude_ext.mp3 ]; then
              echo "File exists."
              exit 1
            fi
    - path::./:
        title: Step Test
        is_always_run: true
        run_if: true
        is_skippable: false
        inputs:
        - compress_archive: true
        - is_debug_mode: true
        - cache_paths: |
            ./another_samples
        - ignore_check_on_paths: |-
            ./another_samples/test_ignorechanges.txt
            !*.mp3
    - script:
        title: Check if MD5 matches the previous one
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            
            rm -rf ./another_samples
            tar -xPf /tmp/cache-archive.tar

            export MD5CURRENT=$(md5 -q ./another_samples/test_ignorechanges.txt)
            if [ "$MD5CURRENT" != "$MD5PREVIOUSLY" ]; then
              echo "MD5 changed."
              exit 1
            fi

            #should not exists
            if [ -f ./another_samples/test_exclude_ext.mp3 ]; then
              echo "File exists."
              exit 1
            fi

  go-tests:
    before_run:
    - _install-test-tools
    steps:
    - script:
        title: Export go files to test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Err check
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go lint
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"
    - script:
        title: Go test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go test ./...
  _install-test-tools:
    steps:
    - script:
        title: Install required testing tools
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            # Check for unhandled errors
            go get -u -v github.com/kisielk/errcheck
            # Go lint
            go get -u -v github.com/golang/lint/golint

  # ----------------------------------------------------------------
  # --- Utility workflows
  godeps-update:
    title: Godeps update
    description: |
      Used for updating bitrise dependencies with godep
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            go get -u -v github.com/tools/godep
            go get github.com/davecgh/go-spew/spew
            go get github.com/pmezard/go-difflib/difflib
            rm -rf ./Godeps
            rm -rf ./vendor
            go get -t -d ./...
            godep save ./...
  
  # ----------------------------------------------------------------
  # --- workflows to create Release
  create-release:
    steps:
    - script:
        title:
        inputs:
        - content: |
            #!/bin/bash
            set -e

            export CI=true
            go get -u github.com/bitrise-tools/releaseman 
            releaseman create --version $STEP_VERSION

  # ----------------------------------------------------------------
  # --- workflows to Share this step into a Step Library
  audit-this-step:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            stepman audit --step-yml ./step.yml

  share-this-step:
    envs:
      # if you want to share this step into a StepLib
      - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL
      - STEP_ID_IN_STEPLIB: cache-push
      - STEP_GIT_VERION_TAG_TO_SHARE: $STEP_VERSION
      - STEP_GIT_CLONE_URL: https://github.com/bitrise-steplib/steps-cache-push.git
    description: |-
      If this is the first time you try to share a Step you should
      first call: $ bitrise share

      This will print you a guide, and information about how Step sharing
      works. Please read it at least once!

      As noted in the Step sharing guide you'll have to fork the
      StepLib you want to share this step into. Once you're done with forking
      the repository you should set your own fork's git clone URL
      in the `.bitrise.secrets.yml` file, or here in the `envs` section,
      as the value of the `MY_STEPLIB_REPO_FORK_GIT_URL` environment.

      You're now ready to share this Step, just make sure that
      the `STEP_ID_IN_STEPLIB` and `STEP_GIT_VERION_TAG_TO_SHARE`
      environments are set to the desired values!

      To share this Step into a StepLib you can just run: $ bitrise run share-this-step

      Once it finishes the only thing left is to actually create a Pull Request,
      the way described in the guide printed at the end of the process.
    before_run:
    - audit-this-step
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            bitrise share start -c ${MY_STEPLIB_REPO_FORK_GIT_URL}
            bitrise share create --stepid ${STEP_ID_IN_STEPLIB} --tag ${STEP_GIT_VERION_TAG_TO_SHARE} --git ${STEP_GIT_CLONE_URL}
            bitrise share finish