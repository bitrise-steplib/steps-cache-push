format_version: 1.1.0
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  # define these in your .bitrise.secrets.yml
  - BITRISE_CACHE_API_URL: $BITRISE_CACHE_API_URL
  - BITRISE_CACHE_INFO_PATH: $BITRISE_CACHE_INFO_PATH
  - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL

workflows:
  test:
    steps:
    - script:
        title: Go Test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            rm -rf ./_sample_artifacts
            git clone https://github.com/bitrise-samples/sample-artifacts.git ./_sample_artifacts
            go test -v ./...
            # errcheck: https://github.com/kisielk/errcheck
            # Install: `go get -u github.com/kisielk/errcheck`
            #  and make sure your main $GOPATH/bin is in $PATH
            errcheck -asserts=true -blank=true -verbose
    - script:
        title: Step audit
        inputs:
        - content: stepman audit --step-yml=./step.yml
    - change-workdir:
        title: Switch working dir to test / _tmp dir
        description: |-
          To prevent step testing issues, like referencing relative
          files with just './some-file' in the step's code, which would
          work for testing the step from this directory directly
          but would break if the step is included in another `bitrise.yml`.
        run_if: true
        inputs:
        - path: ./_tmp
        - is_create_path: true
    - path::./:
        title: Step Test
        run_if: true
        is_skippable: false
        inputs:
        - is_debug_mode: "false"
        - fingerprint_method: file-content-hash
        # - fingerprint_method: file-mod-time
        - cache_paths: |
            $BITRISE_CACHE_DIR
            ../_samples/dir1/
            ./DoesNotExist/
            ./DoesNotExist
            ../_tmp/ignored-samples/Pods/ -> ../_tmp/ignored-samples/Podfile.lock
            ../_samples/single_file/simple_text_file.txt
        - ignore_check_on_paths: |-
            ../_samples/dir1/copy.txt
        - cache_api_url: $BITRISE_CACHE_API_URL
        - compare_cache_info_path: $BITRISE_CACHE_INFO_PATH

# ----------------------------------------------------------------
  # --- Utility workflows
  godeps-update:
    title: Godeps update
    description: |
      Used for updating bitrise dependencies with godep
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            go get -u -v github.com/tools/godep
            go get github.com/davecgh/go-spew/spew
            go get github.com/pmezard/go-difflib/difflib
            rm -rf ./Godeps
            rm -rf ./vendor
            go get -t -d ./...
            godep save ./...

  # ----------------------------------------------------------------
  # --- workflows to Share this step into a Step Library
  share-this-step:
    envs:
      # if you want to share this step into a StepLib
      - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL
      - STEP_ID_IN_STEPLIB: cache-push
      - STEP_GIT_VERION_TAG_TO_SHARE: "1.1.1"
      - STEP_GIT_CLONE_URL: https://github.com/bitrise-steplib/steps-cache-push.git
    description: |-
      If this is the first time you try to share a Step you should
      first call: $ bitrise share

      This will print you a guide, and information about how Step sharing
      works. Please read it at least once!

      As noted in the Step sharing guide you'll have to fork the
      StepLib you want to share this step into. Once you're done with forking
      the repository you should set your own fork's git clone URL
      in the `.bitrise.secrets.yml` file, or here in the `envs` section,
      as the value of the `MY_STEPLIB_REPO_FORK_GIT_URL` environment.

      You're now ready to share this Step, just make sure that
      the `STEP_ID_IN_STEPLIB` and `STEP_GIT_VERION_TAG_TO_SHARE`
      environments are set to the desired values!

      To share this Step into a StepLib you can just run: $ bitrise run share-this-step

      Once it finishes the only thing left is to actually create a Pull Request,
      the way described in the guide printed at the end of the process.
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -x

            bitrise share start -c ${MY_STEPLIB_REPO_FORK_GIT_URL}

            bitrise share create --stepid ${STEP_ID_IN_STEPLIB} --tag ${STEP_GIT_VERION_TAG_TO_SHARE} --git ${STEP_GIT_CLONE_URL}

            bitrise share finish
