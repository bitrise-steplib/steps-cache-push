format_version: 6
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  # define these in your .bitrise.secrets.yml
  - BITRISE_CACHE_API_URL: $BITRISE_CACHE_API_URL # use file url scheme (file://) to create a cache archive in a local directory
  - BITRISE_CACHE_INFO_PATH: $BITRISE_CACHE_INFO_PATH
  - ORIG_BITRISE_SOURCE_DIR: $BITRISE_SOURCE_DIR

workflows:
  backwared_compatible_test:
    description: |
      Test to make sure the cache descriptor file's format is not changing.
    envs:
    - TMP_DIR: $ORIG_BITRISE_SOURCE_DIR/_tmp3
    - CACHE_PATH: |
        $BITRISE_CACHE_DIR
        ../_sample_artifacts/filestructure -> ../_sample_artifacts/filestructure/build/findme.test
        ./DoesNotExist/
        ./DoesNotExist
        ~/DoesNotExist
        /Does/not/exists
        ~/.android -> ~/.lockfile
        ../_sample_artifacts/ipas
        ../_sample_artifacts/ipas/
        ../_sample_artifacts/filestructure/build/test.bin
    - IGNORE_PATH: |-
        ../_sample_artifacts/filestructure/sub-dir
        ~/DoesNotExists/This
        !~/.android/dir
        *.apk
    steps:
    - script:
        title: Cleanup $TMP_DIR and archive tmp files
        inputs:
        - content: rm -rf "$TMP_DIR" "/tmp/cache-archive.tar" "/tmp/cache-info.json"
    - change-workdir:
        title: Switch working dir to $TMP_DIR
        inputs:
        - path: $TMP_DIR
        - is_create_path: true
    - cache-push:
        title: Latest released version
        run_if: true
        is_skippable: false
        inputs:
        - is_debug_mode: true
        - cache_paths: $CACHE_PATH
        - ignore_check_on_paths: $IGNORE_PATH
    - script:
        title: Extract cache
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            
            # remove TMP_DIR to cleanup test_ignorechanges.txt file
            rm -rf $TMP_DIR
            # extract the archive to get the archived test_ignorechanges.txt file
            tar -xPf /tmp/cache-archive.tar
    - script:
        title: Current version
        run_if: true
        inputs:
        - content: mv "/tmp/cache-info.json" "/tmp/cache-info_orig.json"
    - path::./:
        title: Current version
        run_if: true
        is_skippable: false
        inputs:
        - is_debug_mode: true
        - cache_paths: $CACHE_PATH
        - ignore_check_on_paths: $IGNORE_PATH
    - script:
        title: Current version
        run_if: true
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            if [ "$(cat /tmp/cache-info_orig.json)" != "$(cat /tmp/cache-info_orig.json)" ] ; then
                echo "Cache descriptor file changed"
                exit 1
            fi

  smoke_test:
    description: |
      Simple test to make sure the step is able to cache files
      using some exclude and include paths.
    envs:
    - TMP_DIR: $ORIG_BITRISE_SOURCE_DIR/_tmp1
    steps:
    - script:
        title: Cleanup $TMP_DIR and archive tmp files
        inputs:
        - content: rm -rf "$TMP_DIR" "/tmp/cache-archive.tar" "/tmp/cache-info.json"
    - change-workdir:
        title: Switch working dir to $TMP_DIR
        inputs:
        - path: $TMP_DIR
        - is_create_path: true
    - script:
        title: Download assets
        inputs:
        - content:  git clone https://github.com/bitrise-samples/sample-artifacts.git $TMP_DIR/_sample_artifacts
    - change-workdir:
        title: Switch working dir to $TMP_DIR/_workdir
        run_if: true
        inputs:
        - path: $TMP_DIR/_workdir
        - is_create_path: true
    - path::./:
        title: Step Test
        run_if: true
        is_skippable: false
        inputs:
        - is_debug_mode: true
        - cache_paths: |
            $BITRISE_CACHE_DIR
            ../_sample_artifacts/filestructure -> ../_sample_artifacts/filestructure/build/findme.test
            ./DoesNotExist/
            ./DoesNotExist
            ~/DoesNotExist
            /Does/not/exists
            ~/.android -> ~/.lockfile
            ../_sample_artifacts/ipas
            ../_sample_artifacts/ipas/
            ../_sample_artifacts/filestructure/build/test.bin
        - ignore_check_on_paths: |-
            ../_sample_artifacts/filestructure/sub-dir
            ~/DoesNotExists/This
            !~/.android/dir
            *.apk

  ignore_path_test:
    description: |
      Tests if ignored file's change does not triggers new cache generation,
      so the ignored file should remain as it was originally, even if it gets modified
      betweeen two cache push step run.
    envs:
    - TMP_DIR: $ORIG_BITRISE_SOURCE_DIR/_tmp2
    - CACHE_PATH: |
        $TMP_DIR
    - IGNORE_PATH: |
        $TMP_DIR/test_ignorechanges.txt
        !*.mp3
    steps:
    - script:
        title: Cleanup $TMP_DIR and archive tmp files
        inputs:
        - content: rm -rf "$TMP_DIR" "/tmp/cache-archive.tar" "/tmp/cache-info.json"
    - change-workdir:
        title: Switch working dir to $TMP_DIR
        inputs:
        - path: $TMP_DIR
        - is_create_path: true
    - script:
        title: Create sample files
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            #should follow changes
            echo "content" > $TMP_DIR/test_file1.txt

            #should not exists
            echo "content" > $TMP_DIR/test_exclude_ext.mp3

            #should exists but ignore changes
            echo "content" > $TMP_DIR/test_ignorechanges.txt
    - path::./:
        title: Step Test
        is_always_run: true
        run_if: true
        is_skippable: false
        inputs:
        - compress_archive: true
        - is_debug_mode: true
        - cache_paths: $CACHE_PATH
        - ignore_check_on_paths: $IGNORE_PATH
    - script:
        title: Store MD5 hash and check if file doesn't exists
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            
            # remove TMP_DIR to cleanup test_ignorechanges.txt file
            rm -rf $TMP_DIR
            # extract the archive to get the archived test_ignorechanges.txt file
            tar -xPf /tmp/cache-archive.tar

            # export the MD5 hash of test_ignorechanges.txt file
            # this file's content should remain as it is even if it gets modified
            # since this files if in ignore list and no other files changed
            envman add --key MD5PREVIOUSLY --value $(md5 -q $TMP_DIR/test_ignorechanges.txt)

            # following cache should not update the archive even if this file changes
            echo "content" >> $TMP_DIR/test_ignorechanges.txt

            # .mp3 is part of the exclude list, should not exists
            if [ -f $TMP_DIR/test_exclude_ext.mp3 ]; then
              echo "File exists."
              exit 1
            fi
    - path::./:
        title: Step Test
        is_always_run: true
        run_if: true
        is_skippable: false
        inputs:
        - compress_archive: true
        - is_debug_mode: true
        - cache_paths: $CACHE_PATH
        - ignore_check_on_paths: $IGNORE_PATH
    - script:
        title: Check if MD5 matches the previous one
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            
            # remove TMP_DIR to cleanup test_ignorechanges.txt file
            rm -rf $TMP_DIR
            # extract the archive to get the archived test_ignorechanges.txt file
            tar -xPf /tmp/cache-archive.tar

            # test_ignorechanges.txt was part of the ignore list, so it's change should not present in the archive
            export MD5CURRENT=$(md5 -q $TMP_DIR/test_ignorechanges.txt)
            if [ "$MD5CURRENT" != "$MD5PREVIOUSLY" ]; then
              echo "MD5 changed."
              exit 1
            fi

            # .mp3 is part of the exclude list, should not exists
            if [ -f $TMP_DIR/test_exclude_ext.mp3 ]; then
              echo "File exists."
              exit 1
            fi

  test:
    before_run:
    - audit-this-step
    after_run:
    - smoke_test
    - ignore_path_test
    - backwared_compatible_test
    steps:
    - go-list:
    - golint:
    - errcheck:
    - go-test:
    - codecov:
        run_if: .IsCI
        inputs:
        - other_options: -f ${GO_CODE_COVERAGE_REPORT_PATH}
        - CODECOV_TOKEN: "$CODECOV_UPLOAD_TOKEN"

  # ----------------------------------------------------------------
  # --- Utility workflows
  dep-update:
    title: Dep update
    description: |
      Used for updating bitrise dependencies with dep
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go get -u -v github.com/golang/dep/cmd/dep
            dep ensure -v
            dep ensure -v -update

  # ----------------------------------------------------------------
  # --- workflows to Share this step into a Step Library
  audit-this-step:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            stepman audit --step-yml ./step.yml
