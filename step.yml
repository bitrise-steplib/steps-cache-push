title: "Bitrise.io Cache:Push"
summary: "Updates the Cache, if required"
description: |-
  This Step checks whether the Cache have to be updated (based on the
  `Cache Paths` and `Ignore Paths from change check` inputs),
  and if it have to be it will create a new cache archive and upload it.

  It won't update/upload the Cache if the Cache did not change,
  nor in case of Pull Request builds (unless you change the `run_if` property of the Step).

  You can find a setup and tips & tricks guide on the Bitrise DevCenter
  at [http://devcenter.bitrise.io/caching/about-caching/](http://devcenter.bitrise.io/caching/about-caching/).
website: https://github.com/bitrise-steplib/steps-cache-push
source_code_url: https://github.com/bitrise-steplib/steps-cache-push.git
support_url: https://github.com/bitrise-steplib/steps-cache-push/issues
host_os_tags:
  - osx-10.10
  - ubuntu-14.04
project_type_tags: []
type_tags:
  - bitrise.io
  - cache
is_requires_admin_user: false
is_always_run: false
is_skippable: true
deps:
  apt_get:
  - name: rsync
  - name: tar
run_if: ".IsCI | and (not .IsPR)"
inputs:
  - cache_paths: |
      $BITRISE_CACHE_DIR

      ./Pods -> ./Podfile.lock

      $HOME/.gradle
      ./.gradle
    opts:
      title: "Cache paths"
      summary: Cache these paths. Separate paths with a newline.
      description: |-
        Cache these paths. Separate paths with a newline.

        A path item can be either a file or a directory.

        You can also specify an "update indicator file" with the `->`
        syntax: `update/this -> if/this/file/is/updated`.
        *The indicator can only be a file!*

        If you have a path in the list which doesn't exist that will not cause
        this Step to fail. It'll be logged but the Step will try to gather
        as many specified & valid paths as it can, and just print warning
        about the invalid items.
      is_required: true
  - ignore_check_on_paths: |-
      $HOME/.gradle/caches/*.lock
      $HOME/.gradle/caches/*.bin
      ./.gradle/*.lock
      ./.gradle/*.bin
    opts:
      title: "Ignore Paths from change check"
      summary: "Ignore these Paths when checking for cache changes"
      description: |-
        These paths will be ignored from change checking.
        If something changed under the specified path(s) and nothing else changed
        then the cache won't be updated.

        **These paths are NOT ignored from the cache**, if a path is located
        inside a specified Cache Path item it'll be included in the cache,
        just won't be checked for changes.

        The path can also include the `*` wildcard character, which will
        do a **string** based compare (e.g. `a/*/b` will match `a/1/2/3/b` too,
        not just `a/x/b`).

        Important: you can't ignore a path which results in an invalid cache item.
        For example, if you specify the path `a/path/to/cache` to be cached, you
        can't ignore `a/path/to`, as that would ignore every file from checking
        for a change - no fingerprint could be generated for `a/path/to/cache`.
        You're free to ignore paths inside a Cache Path however, e.g.
        if path is `a/path/to/cache` you're free to ignore `a/path/to/cache/.ignore-me`,
        unless that's the only file inside `a/path/to/cache`.

        The point is: you should not specify an ignore rule which would completely
        ignore a specified Cache Path item, as that would result in a path which
        can't be checked for updates/changes/fingerprints.
  - workdir: $BITRISE_SOURCE_DIR
    opts:
      title: Working directory path
      summary: Working directory path
      description: |-
        Working directory path - should be an absolute path.
  - fingerprint_method: "file-content-hash"
    opts:
      title: Fingerprint Method
      summary: Fingerprint method, used for checking file changes.
      description: |-
        The specified Fingerprint Method will be used to calculate
        fingerprints for the cached files.

        The (file) fingerprint is used to check whether
        the cached files did change - if it changed a new cache will be generated,
        if the fingerprint matches the previous cache version's fingerprint then
        no new cache will be generated.

        **Regardless of which method you choose** the following file attributes will
        be used to create the fingerprint **in addition** to the method you choose:

        * File path
        * File size
        * File permission bits

        Information about the options:

        * `file-content-hash` : create a file content checksum hash for every file in the cache,
          and use that as the fingerprint source of the file. This means that **the full file content will be loaded** in
          order to create the checksum hash!
        * `file-mod-time` : use the file's "modified at" time information. For larger files this method
          can be significantly faster, as the file don't have to be loaded to calculate this information!

        **Note**: in case of "update indicator files" the fingerprint method will always be `file-content-hash`,
        regardless of which option you select here.
      value_options:
      - file-content-hash
      - file-mod-time
  - is_debug_mode: "false"
    opts:
      title: "Debug mode?"
      summary: "If debug mode is enabled the step will print verbose logs"
      description: |-
        If debug mode is enabled the step will print verbose logs
      is_required: true
      value_options:
      - "true"
      - "false"
  - compress_archive: "false"
    opts:
      title: "Compress cache?"
      summary: "If compress cache set to `true`, then it will upload a compressed archive."
      description: |-
        If compress cache set to `true`, then it will upload a compressed archive.
      is_required: true
      value_options:
      - "true"
      - "false"
  - bitrise_cache_include_paths: $BITRISE_CACHE_INCLUDE_PATHS
    opts:
      title: "Cache paths collected runtime"
      summary: "Collected dependencies by steps from the build"
      is_required: true
      is_dont_change_value: true
  - bitrise_cache_exclude_paths: $BITRISE_CACHE_EXCLUDE_PATHS
    opts:
      title: "Ignore paths collected runtime"
      summary: "Collected regularly changing files or extensions by steps from the build"
      is_required: true
      is_dont_change_value: true
  - cache_api_url: $BITRISE_CACHE_API_URL
    opts:
      title: "TMP: Cache Upload URL"
      summary: "Cache Upload URL"
      description: |-
        Cache Upload URL
      is_required: true
      is_dont_change_value: true
  - compare_cache_info_path: $BITRISE_CACHE_INFO_PATH
    opts:
      title: "Cache Info file path, for compare"
      summary: "Compare the fingerprints against this Cache Info"
      description: |-
        Compare the fingerprints against this Cache Info, to see if cache
        update/upload is required or not.
      is_required: true
      is_dont_change_value: true